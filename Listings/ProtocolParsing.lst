C51 COMPILER V9.56.0.0   PROTOCOLPARSING                                                   03/16/2018 16:08:28 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE PROTOCOLPARSING
OBJECT MODULE PLACED IN .\Objects\ProtocolParsing.obj
COMPILER INVOKED BY: D:\SoftWare\Keil\C51\BIN\C51.EXE ProtocolParsing.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\ProtocolParsing.lst) OBJECT(.\Objects\ProtocolParsing.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include <ProtocolParsing.H>
   3          #include <MODBUS.H>
   4          
   5          uchar code _CRCH[]=  
   6          {  
   7          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
   8          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
   9          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,  
  10          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,  
  11          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,  
  12          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,  
  13          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,  
  14          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,  
  15          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  16          0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
  17          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,  
  18          0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,  
  19          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  20          0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
  21          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,  
  22          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,  
  23          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  24          0x40  
  25          };  
  26            
  27          uchar code _CRCL[] =  
  28          {  
  29          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,  
  30          0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,  
  31          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,  
  32          0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,  
  33          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,  
  34          0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,  
  35          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,  
  36          0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,  
  37          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,  
  38          0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,  
  39          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,  
  40          0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,  
  41          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,  
  42          0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,  
  43          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,  
  44          0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,  
  45          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,  
  46          0x40  
  47          };
  48          /*
  49          @函数名：CRC16校验函数
  50          
  51          @函数功能：用于CRC16校验
  52          
  53          @输入参数：
  54                  |序号   |变量名                 |变量类型       |
C51 COMPILER V9.56.0.0   PROTOCOLPARSING                                                   03/16/2018 16:08:28 PAGE 2   

  55                  |-------|---------------|-----------|
  56                  | 1             |要计算的数组   |uchar *        |
  57                  | 2             |数组长度               |uint           |
  58                  
  59          @输出参数：
  60                  return TYPE_CRC crc结构体，包括crc高字节和低字节
  61          
  62          @备注：
  63          */
  64          TYPE_CRC CRC16(uchar *updata,uint len)  
  65          {  
  66   1              TYPE_CRC xdata DataCRC;
  67   1              uchar xdata uchCRCHi=0xff;  
  68   1              uchar xdata uchCRCLo=0xff;  
  69   1              uint  xdata uindex;  
  70   1              while(len--)  
  71   1              {  
  72   2                uindex = uchCRCHi ^ *updata++;  
  73   2                uchCRCHi = uchCRCLo ^ _CRCH[uindex];  
  74   2                uchCRCLo = _CRCL[uindex];  
  75   2              }  
  76   1          
  77   1              DataCRC.High = uchCRCHi;
  78   1              DataCRC.Low  = uchCRCLo;
  79   1              return DataCRC;  
  80   1      }  
  81          
  82          /*
  83          @函数名：协议打包V1.1
  84          
  85          **发送缓存使用静态数组，防止程序混乱
  86          
  87          @函数功能：用于智能实验室通信协议的打包
  88          
  89          @输入参数：
  90                  |序号   |变量名         |变量类型       |
  91                  |-------|-----------|-----------|
  92                  | 1             |设备地址       |uint           |
  93                  | 2             |设备标号       |uchar          |
  94                  | 3             |功能码         |uint           |
  95                  | 4             |数据长度       |uint           |
  96                  | 5             |数据           |uchar *        |
  97                  
  98          @输出参数：
  99                  return *OutPutBuf 打包完成的数组
 100          
 101          @备注：目前该函数所支持的最大打包长度为300字节
 102          */
 103          char * AgreementPackaging(uint addr ,uchar num ,uint com ,uint len ,uchar *dat)
 104          {
 105   1              static uchar xdata OutPutBuf[300];
 106   1              uint xdata buf_count = 0;
 107   1              
 108   1              TYPE_CRC xdata crc;
 109   1                      
 110   1      
 111   1              OutPutBuf[0] = 0x7e;
 112   1              OutPutBuf[1] = addr >> 8;
 113   1              OutPutBuf[2] = addr;
 114   1              OutPutBuf[3] = num;
 115   1              OutPutBuf[4] = com >> 8;
 116   1              OutPutBuf[5] = com;
C51 COMPILER V9.56.0.0   PROTOCOLPARSING                                                   03/16/2018 16:08:28 PAGE 3   

 117   1              OutPutBuf[6] = len >> 8;
 118   1              OutPutBuf[7] = len;
 119   1      
 120   1              for(buf_count = 0;buf_count < len;buf_count++)
 121   1                      OutPutBuf[len] = 0;
 122   1      
 123   1              for(buf_count = 0;buf_count < (len - 10);buf_count++)
 124   1              {
 125   2                      OutPutBuf[8+buf_count] = dat[buf_count];
 126   2                      //dat++;
 127   2              }
 128   1              
 129   1              
 130   1              crc = CRC16(OutPutBuf,len - 2);
 131   1              
 132   1              OutPutBuf[len - 2] = crc.High;
 133   1              OutPutBuf[len - 1] = crc.Low;
 134   1                      
 135   1              return OutPutBuf;
 136   1      }
 137          
 138          /*
 139          @函数名：协议解包V1.1
 140          
 141          **V1.1 修复了函数的数据返回值为空的bug
 142          
 143          @函数功能：用于智能实验室通信协议的解包
 144          
 145          @输入参数：
 146                  |序号   |变量名         |变量类型       |
 147                  |-------|-----------|-----------|
 148                  | 1             |数据协议       |uchar *        |
 149                  
 150          @输出参数：
 151                  return TYPE_PACK 解析完成之后的结构体
 152          
 153          @备注：目前该函数所支持的最大数据长度为300字节
 154          */
 155          TYPE_PACK UnpackAgreement(char * buf)
 156          {
 157   1              TYPE_PACK xdata pack;
 158   1              TYPE_CRC xdata crc;
 159   1              uchar xdata crcH,crcL,herd,count;
 160   1              uchar xdata dat_buf[300];
 161   1              
 162   1              herd = buf[0];
 163   1              pack.addr = buf[1] << 8 | buf[2];
 164   1              pack.num  = buf[3];
 165   1              pack.com  = buf[4] << 8 | buf[5];
 166   1              pack.len  = buf[6] << 8 | buf[7];
 167   1      //      pack.dat  = &buf[8];
 168   1              
 169   1              for(count = 0;count <= pack.len - 10 ;count++)
 170   1                      dat_buf[count] = buf[count + 8];
 171   1              
 172   1              pack.dat  = &dat_buf[0];
 173   1              
 174   1              crcL = buf[pack.len - 2];
 175   1              crcH = buf[pack.len - 1];       
 176   1              
 177   1              crc = CRC16(buf,pack.len-2);
 178   1      
C51 COMPILER V9.56.0.0   PROTOCOLPARSING                                                   03/16/2018 16:08:28 PAGE 4   

 179   1              for(count = 0;count <= pack.len;count++)
 180   1                      buf[count] = 0;
 181   1              
 182   1              if(herd != 0x7e)
 183   1              {
 184   2                      pack.error = FRAME_HARD_ERROR;
 185   2                      return pack;
 186   2              }
 187   1              else if(pack.addr != ADDRESS)
 188   1              {
 189   2                      pack.error = ADDRESS_ERROR;
 190   2                      return pack;
 191   2              }
 192   1              else if(pack.num != NUMBER)
 193   1              {
 194   2                      pack.error = NUMBER_ERROR;
 195   2                      return pack;
 196   2              }
 197   1              else if(pack.len <10 | pack.len > 300)
 198   1              {
 199   2                      pack.error = LENGTH_OF_ERROR;
 200   2                      return pack;
 201   2              }
 202   1              else
 203   1              {               
 204   2                      if(crc.High == crcL && crc.Low == crcH)
 205   2                      {
 206   3                              pack.error = ERROR_NONE;
 207   3                              return pack;
 208   3                      }
 209   2                      else
 210   2                      {
 211   3                              pack.error = CRC_ERROR;
 212   3                              return pack;
 213   3                      }
 214   2              }
 215   1      }
 216          
 217          
 218          
 219          
 220          
 221          
 222          
 223          
 224          
 225          
 226          
 227          
 228          
 229          
 230          
 231          
 232          
 233          
 234          
 235          
 236          
 237          
 238          
 239          
 240          
C51 COMPILER V9.56.0.0   PROTOCOLPARSING                                                   03/16/2018 16:08:28 PAGE 5   

 241          
 242          
 243          
 244          
 245          
 246          
 247          
 248          
 249          
 250          
 251          
 252          
 253          
 254          
 255          
 256          
 257          
 258          
 259          
 260          
 261          
 262          
 263          
 264          
 265          
 266          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    837    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =    300     327
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
