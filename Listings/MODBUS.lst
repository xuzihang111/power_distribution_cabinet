C51 COMPILER V9.56.0.0   MODBUS                                                            05/14/2018 12:38:53 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN .\Objects\MODBUS.obj
COMPILER INVOKED BY: D:\SoftWare\Keil\C51\BIN\C51.EXE MODBUS.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\MODBUS.lst) OBJECT(.\Objects\MODBUS.obj)

line level    source

   1          #include <MODBUS.H>
   2          #include <STC15F2K60S2.H>
   3          #include <math.H>
   4          
   5          
   6          uchar code modbus_CRCH[]=  
   7          {  
   8          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
   9          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
  10          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,  
  11          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,  
  12          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,  
  13          0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,  
  14          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,  
  15          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,  
  16          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  17          0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
  18          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,  
  19          0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,  
  20          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  21          0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,  
  22          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,  
  23          0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,  
  24          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,  
  25          0x40  
  26          };  
  27            
  28          uchar code modbus_CRCL[] =  
  29          {  
  30          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,  
  31          0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,  
  32          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,  
  33          0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,  
  34          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,  
  35          0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,  
  36          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,  
  37          0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,  
  38          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,  
  39          0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,  
  40          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,  
  41          0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,  
  42          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,  
  43          0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,  
  44          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,  
  45          0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,  
  46          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,  
  47          0x40  
  48          };  
  49          
  50          float code prescribing[] = {0.500000, 0.250000, 0.125000, 0.062500, 0.031250, 0.015625, 0.007813, 0.003906
             -, 
  51                                                                  0.001953, 0.000977, 0.000488, 0.000244, 0.000122, 0.000061, 0.000031, 0.000015, 
  52                                                                  0.000008, 0.000004, 0.000002, 0.000001, 0.000000, 0.000000, 0.000000};
  53          
C51 COMPILER V9.56.0.0   MODBUS                                                            05/14/2018 12:38:53 PAGE 2   

  54                                                                  
  55                                                                  
  56                                                                  
  57                                                                  
  58          TYPE_CRC modbusCRC16(uchar *updata,uint len)  
  59          {  
  60   1              TYPE_CRC DataCRC;
  61   1              uchar uchCRCHi=0xff;  
  62   1              uchar uchCRCLo=0xff;  
  63   1              uint  uindex;  
  64   1              while(len--)  
  65   1              {  
  66   2                uindex = uchCRCHi ^ *updata++;  
  67   2                uchCRCHi = uchCRCLo ^ modbus_CRCH[uindex];  
  68   2                uchCRCLo = modbus_CRCL[uindex];  
  69   2              }  
  70   1          
  71   1              DataCRC.High = uchCRCHi;
  72   1              DataCRC.Low  = uchCRCLo;
  73   1              return DataCRC;  
  74   1      }  
  75          
  76          char * MakeModbus(uchar addr, uchar com, int reg_addr, int len)//合成modbus数据包
  77          {
  78   1              char xdata return_buf[10];
  79   1              TYPE_CRC crc ;
  80   1              
  81   1              return_buf[0] = addr;
  82   1              return_buf[1] = com;
  83   1              return_buf[2] = reg_addr >> 8;
  84   1              return_buf[3] = reg_addr;
  85   1              return_buf[4] = len >> 8;
  86   1              return_buf[5] = len;
  87   1              
  88   1              crc = modbusCRC16(return_buf,6);
  89   1              
  90   1              
  91   1              return_buf[6] = crc.High;
  92   1              return_buf[7] = crc.Low;
  93   1              
  94   1              return return_buf;
  95   1      }
  96          
  97          TYPE_MODBUS ModbusParsing(uchar *buf)   //解析modbus数据包
  98          {
  99   1              
 100   1              static uchar xdata out_put[150];
 101   1      //      int i;
 102   1              int count = 0;
 103   1      //      uchar len;
 104   1              TYPE_MODBUS modbus;
 105   1              TYPE_CRC crc;
 106   1      
 107   1              modbus.len = buf[2];
 108   1                      
 109   1              for(count = 0;count <= modbus.len;count++)
 110   1                      out_put[count] = 0;
 111   1      
 112   1              for(count = 0;count<modbus.len;count++)
 113   1              {
 114   2                      out_put[count] = buf[count + 3];
 115   2              }
C51 COMPILER V9.56.0.0   MODBUS                                                            05/14/2018 12:38:53 PAGE 3   

 116   1              modbus.dat = &out_put[0];
 117   1              
 118   1              crc = modbusCRC16(buf,modbus.len + 3);
 119   1      
 120   1              for(count = 0;count <= modbus.len;count++)
 121   1                      buf[count] = 0;
 122   1      
 123   1              if((crc.High == buf[modbus.len + 4]) && (crc.Low == buf[modbus.len + 5]))
 124   1              {
 125   2                      P62 = !P62;
 126   2                      modbus.error = 0;
 127   2                      return modbus;
 128   2              }
 129   1              else
 130   1              {
 131   2                      modbus.error = 1;
 132   2                      return modbus;
 133   2              }
 134   1      }
 135          
 136          float calculate(char * buf)             //浮点型转换
 137          {
 138   1              char xdata i;
 139   1              unsigned char xdata S = 0, E = 0;
 140   1              float xdata M = 0.0;
 141   1              float xdata Val;
 142   1              
 143   1              S = buf[0] >> 7;
 144   1              E = (buf[0] << 1) | (buf[1] >> 7);
 145   1              E -= 127;
 146   1              
 147   1              for(i = 0;i < 8;i++)
 148   1              {
 149   2                      if(buf[3] & 1)
 150   2                      {
 151   3                              M += prescribing[22 - i];
 152   3                      }
 153   2                      buf[3] >>= 1;
 154   2              }
 155   1              for(i = 0;i < 8;i++)
 156   1              {
 157   2                      if(buf[2] & 1)
 158   2                      {
 159   3                              M += prescribing[14 - i];
 160   3                      }
 161   2                      buf[2] >>= 1;
 162   2              }
 163   1              for(i = 0;i < 7;i++)
 164   1              {
 165   2                      if(buf[1] & 1)
 166   2                      {
 167   3                              M += prescribing[6 - i];
 168   3                      }
 169   2                      buf[1] >>= 1;
 170   2              }
 171   1              Val = (-1 * S) + pow(2, E) * (1 + M);
 172   1              
 173   1              return Val;
 174   1      }
 175          
 176          
 177          
C51 COMPILER V9.56.0.0   MODBUS                                                            05/14/2018 12:38:53 PAGE 4   

 178          
 179          
 180          
 181          
 182          
 183          
 184          
 185          
 186          
 187          
 188          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    967    ----
   CONSTANT SIZE    =    604    ----
   XDATA SIZE       =    150      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
